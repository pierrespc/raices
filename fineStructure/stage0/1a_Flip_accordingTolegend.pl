#!/bin/perl

use strict;
use warnings; 
use Cwd;

sub Flip{
	my $allele=$_[0];
	if($allele eq "A"){
		return("T");
	}elsif($allele eq "T"){
		return("A");
	}elsif($allele eq "G"){
		return("C");
	}elsif($allele eq "C"){
		return("G");
	}elsif($allele eq "0"){
		return("0");
	}else{
		return("NA");
	}
}

sub checkSNP{
	my $allele=$_[0];
	if($allele ne "A" && $allele ne "T" && $allele ne "G" && $allele ne "C" && $allele ne "0"){
		return("F");
	}else{
		return("T");
	}
}

my $usage="<snp.strand> <bim>\n With snp strand <type1> | <type2> | <pos>	| <main_id>	| <main_A>	| <main_B>	| <main_flippable> |	<ref_id> |	<ref_A> |	<ref_B>	| <ref_flippable>\n";

###snpStrand generated by check option from shapeIT


my $snpStrand=shift or die $usage;
my $NewBim=$snpStrand.".bim";
my $bim=shift or die $usage;

open(SNP,$snpStrand) || die("cant open $snpStrand \n");
open(NOT,">".$snpStrand.".NotPresent") || die ("can't write ".$snpStrand.".NotPresent\n");
open(NOFLI,">".$snpStrand.".NotFlippable") || die ("can't write ".$snpStrand.".NotFlippable\n");

my %Ref;
my @dupli=();
foreach my $line (<SNP>){
	chomp $line;
	my @temp=split(/\s+/,$line);
	if(exists $Ref{$temp[3]}){
        	push(@dupli,$temp[3]);
    	}
	if($temp[7] eq "NA" || checkSNP($temp[8]) eq "F" ||  checkSNP($temp[9]) eq "F"){
        	print NOT $temp[3]."\n";
		next;
	}else{
    	    if($temp[0] eq "Missing" || $temp[4] eq Flip($temp[5])){
        	    print NOFLI $temp[3]."\n";
       	    }else{
		if(! ((Flip($temp[4]) eq $temp[8] && Flip($temp[5]) eq $temp[9]) || (Flip($temp[4]) eq $temp[9] && Flip($temp[5]) eq $temp[8]))){
			print NOFLI $temp[3]."\n";
		}else{
            		$Ref{$temp[3]}=[ ($temp[4], $temp[5]) ];
            	}
   	   }
	}
	#print join(" ",@{$Ref{$temp[3]}})."\n";
}

#foreach my $key (keys %Ref){
#	print $key." --> @{$Ref{$key}}\n";
#}
close(SNP);
close(NOFLI);
close(NOT);

if(@dupli>0){
    open(DUPLI,">".$snpStrand.".DuplicatedNames") || die ("can't write ".$snpStrand.".DuplicatedNames\n");
    print DUPLI join("\n",@dupli);
    close(DUPLI);
}

open(BIM,$bim) || die("cant open $bim \n");
open(FLIPPED,">".$snpStrand.".Flipped") || die ("can't write ".$snpStrand.".Flipped\n");
my @out;
foreach my $line (<BIM>){
	chomp $line;
	my @temp=split(/\s+/,$line);
	 if(exists $Ref{$temp[1]}){
			$temp[4]=Flip($temp[4]);
			$temp[5]=Flip($temp[5]);
            print FLIPPED $temp[1]."\n";
    }
	push(@out,join("\t",@temp)."\n");
}
close(BIM);
open(BIM,">".$bim) || die("cant write $bim \n");
print BIM @out;
close(BIM);
